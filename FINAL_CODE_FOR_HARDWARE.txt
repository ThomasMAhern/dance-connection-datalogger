// general paramters 
unsigned long  sdcardbackupinterval = .2 ;  // decide in seconds after how long to write the sensor data to SD card , lesser value increase the backup rate , but also increase drain in battery

//BATtery voltage measurement pin is A7 regardless of battery is connected or not
 #define BATpin A7   
  float    BATvoltage = 0 ;

 // declarations for the Accelerometer + gyro LSM6DSOX sensor
float AccelX = 0 ;  float  AccelY = 0 ;  float  AccelZ = 0 ; 
float  GyroX = 0 ;  float  GyroY = 0 ;  float  GyroZ = 0 ; 
float  Temperature1 = 0  ;

#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <Adafruit_LSM6DSOX.h>
Adafruit_LSM6DSOX sox;



//declarations for the FSR 

#define FSRpin  A0
#define  SDcardledpin  8  //13 led next to usb port for charging indication  //  08 next to SD card

const int  measuringresistor = 4.7 ;   // set in Kilo Ohms the resistance of the resistor used in Voltage divider circuit
const int  Vccvoltagedivider = 3.3 ;     //  set in volts the vcc voltage of the voltage divider circuit. in Adalogger M0 this should be 3.3

float   FSRvoltage =  0 ;
float   FSRresistance =  0 ;
float   FSRforce =  0 ;


// declarations for the SD Card Usage 
#include <SD.h>
#include <SPI.h>
#define chipSelectpin 4
File textFile ;

unsigned long currenttime =  0;
unsigned long pasttime = 0 ; 



void setup() {
  Serial.begin(115200);
   
// for IMU 
  Serial.println(" Pressure and Acceleration Data Logger online !");

  // IMUsettingsninfo ( )   ; 
  // IMUreadings ( )  ; 

// FSR FUNCTION CALLS
   pinMode( FSRpin , INPUT);
   pinMode( SDcardledpin , OUTPUT) ;
   
   // SD CARD FUNCTION CALLS

  /*
   Only uncomment the following function to check the specs of your SD card once. 
   For that : keep connected to the USB and open Serial Monitor and then press reset button on the M0 board ,
    some text should appear take screenshot for later USE. 
    then comment the function and upload CODE again.
   */
   // SDcardspecscompleteinfo ( ) ;   //Check SD CARD Specs and Info
    

//Donot uncomment this as this function also initializes SD card object that will be used to read and write by other functions
   SDcardfilescompleteinfo ( ) ;   //Check and return info on every file on SD Card 
 //Donot uncomment this as this function also initializes the IMU for the rest of the functions
   IMUsettingsninfo ( )   ; 

//    FSRfunction ( ) ;
//       IMUreadings ( )  ; 

//  SDcardDatalogger ( )  ;
//    FSRfunction ( ) ;
//       IMUreadings ( )  ; 
//    delay (5000 ) ;
  
//    SDcardDatalogger ( )  ; 
//      FSRfunction ( ) ;
//         IMUreadings ( )  ; 
   
//     SDcardDatalogger ( )  ; 
 

//    SDcardsampleread ( )  ;
  // //   Serial.println(" ---------------");
  // //  SDcardsamplewrite ( ) ;
  // //   Serial.println(" --------------");
  // //  SDcardsampleread ( )  ;
  


}

void loop() {

//delay (10 ) ;  // uncomment this line only for simulation not for hardware testing 
  currenttime  = (millis( )) ; // get the current time in seconds  which is the time since the microcontroller was power ON
  
  if  (  ( currenttime - pasttime ) >= sdcardbackupinterval  ) {
      Serial.println(" --------------");

       digitalWrite(SDcardledpin , HIGH );
       FSRfunction ( ) ; 
       IMUreadings ( )  ; 
       SDcardDatalogger ( )  ; 
       pasttime = currenttime ; 

      Serial.println(" --------------");
   }

   else { digitalWrite(SDcardledpin , LOW); } 



}


// function to read voltage accross the FSR measuring resistor so we can calculate force on the FSR
void FSRfunction  ( ) { 

  unsigned int  FSRadcvalue  =  analogRead( FSRpin )  ; 
  float    FSRadcvoltage =  (((float)FSRadcvalue*Vccvoltagedivider)/1024);
    

    forcecalculatefunction (FSRadcvoltage)  ; 
      // map(value, fromLow, fromHigh, toLow, toHigh)

      //calculate battery Voltage as well 
    unsigned int  BATadcvalue  =  analogRead( BATpin )  ; 
   float    BATadcvoltage =   (((float)BATadcvalue*3.3)/1024) ; 
      BATvoltage   = 2* BATadcvoltage ; 


   Serial.print("  FSR voltage =   ");  Serial.print(  FSRadcvoltage );  Serial.println("  Volts   ");
   Serial.print("  FSR resistance =   ");  Serial.print(  FSRresistance );  Serial.println("  Kilo-ohms   ");
   Serial.print("  FSR Force =   ");  Serial.print(  FSRforce );   Serial.println("  grams    ");
   Serial.print("  BAT Voltage =   ");  Serial.print(  BATvoltage );   Serial.println("  Volts    ");
   Serial.println(" -------------------------------------------");

}

 // calculates the force corresponding to the measure resistance of force by using the results of polynomial curve fitting which is done based on the data provided by the manufacturers
 void  forcecalculatefunction (float ADCvolt ) { 
   
    FSRvoltage =  ADCvolt  ;
    FSRresistance = ( ((Vccvoltagedivider - ADCvolt)*((float)measuringresistor))/ ADCvolt)   ;
   
   
    if  (FSRresistance >=  7.5  ) { 
      FSRforce = 0 ;}
      else   FSRforce = map (FSRresistance , 6.85 ,  0.3797 , 100 , 6000) ;
    
 }


 // this functions makes the writes to the datalog file on SD card
void SDcardDatalogger ( ) { 

textFile = SD.open("datalog.txt", FILE_WRITE);
  if (textFile) {
    Serial.println(" Backing up to datalog.txt.....");


    textFile.print (currenttime)  ;  textFile.print (","); 
    textFile.print (BATvoltage)  ; textFile.print (",");

    textFile.print(AccelX); textFile.print (",");
    textFile.print(AccelY); textFile.print (",");
    textFile.print(AccelZ); textFile.print (",");

    textFile.print(GyroX); textFile.print (",");
    textFile.print(GyroY); textFile.print (",");
    textFile.print(GyroZ); textFile.print (",");

    textFile.print(Temperature1); textFile.print (",");

    textFile.print(FSRvoltage); textFile.print (",");
    textFile.print(FSRresistance); textFile.print (",");
   
    textFile.println(FSRforce);
    textFile.close();
     
  } else {
    Serial.println("error opening datalog.txt!");
  }
}

// a function to read everthing from the log file and print it into serial monitor
void SDcardsampleread ( )  { 

  // Example of reading file from the card:
   textFile = SD.open("datalog.txt");
  if (textFile) {
    Serial.println(" Reading datalog.txt File ");
    while (textFile.available()) {
      Serial.write(textFile.read());
    }
    textFile.close();
    Serial.println("   ");
  } else {
    Serial.println("error opening datalog.txt!");
  }

} 

// function to get readings from the IMU via the I2C bus connection
 void IMUreadings ( ) {


  //  /* Get a new normalized sensor event */

  sensors_event_t accel;
  sensors_event_t gyro;
  sensors_event_t temp;
  
  sox.getEvent(&accel, &gyro, &temp);

  AccelX = accel.acceleration.x   ; AccelY = accel.acceleration.y  ;
  AccelZ = accel.acceleration.z ;

  GyroX = gyro.gyro.x ;   GyroY = gyro.gyro.y ; 
  GyroZ = gyro.gyro.z ; 

 Temperature1 = temp.temperature ; 


  Serial.print("\t\tTemperature ");
  Serial.print(temp.temperature);
  Serial.println(" deg C");

  /* Display the results (acceleration is measured in m/s^2) */
  Serial.print("\t\tAccel X: ");
  Serial.print(accel.acceleration.x);
  Serial.print(" \tY: ");
  Serial.print(accel.acceleration.y);
  Serial.print(" \tZ: ");
  Serial.print(accel.acceleration.z);
  Serial.println(" m/s^2 ");

  /* Display the results (rotation is measured in rad/s) */
  Serial.print("\t\tGyro X: ");
  Serial.print(gyro.gyro.x);
  Serial.print(" \tY: ");
  Serial.print(gyro.gyro.y);
  Serial.print(" \tZ: ");
  Serial.print(gyro.gyro.z);
  Serial.println(" radians/s ");
  Serial.println();


  //  // serial plotter friendly format

  //  Serial.print(temp.temperature);
  //  Serial.print(",");

  //  Serial.print(accel.acceleration.x);
  //  Serial.print(","); Serial.print(accel.acceleration.y);
  //  Serial.print(","); Serial.print(accel.acceleration.z);
  //  Serial.print(",");

  // Serial.print(gyro.gyro.x);
  // Serial.print(","); Serial.print(gyro.gyro.y);
  // Serial.print(","); Serial.print(gyro.gyro.z);
  // Serial.println();
  //  delayMicroseconds(10000);

 } 

// following functions intializes , applies settings and prints those settings and specs
// for the accelerometer + gyroscope combo
 void IMUsettingsninfo ( )   { 

 if (!sox.begin_I2C()) {
    // if (!sox.begin_SPI(LSM_CS)) {
    // if (!sox.begin_SPI(LSM_CS, LSM_SCK, LSM_MISO, LSM_MOSI)) {
     Serial.println("Failed to find and initialize LSM6DSOX chip");
    // while (1) {
    //   delay(10);
    // }
  }

  else { Serial.println("LSM6DSOX Found!"); } 


    //  print ranges and settings of onboard Accelerometer and Gyroscope
    // They are currently at default. if there is need to change them
     // the arguments of the case statements can simply copied and pasted in
     // the appropriate .set command just above the case statements....otherwise everthing stays default


  // sox.setAccelRange(LSM6DS_ACCEL_RANGE_2_G);
  // Serial.print("Accelerometer range set to: ");
  // switch (sox.getAccelRange()) {
  // case LSM6DS_ACCEL_RANGE_2_G:
  //   Serial.println("+-2G");
  //   break;
  // case LSM6DS_ACCEL_RANGE_4_G:
  //   Serial.println("+-4G");
  //   break;
  // case LSM6DS_ACCEL_RANGE_8_G:
  //   Serial.println("+-8G");
  //   break;
  // case LSM6DS_ACCEL_RANGE_16_G:
  //   Serial.println("+-16G");
  //   break;
  // }

  // // sox.setGyroRange(LSM6DS_GYRO_RANGE_250_DPS );
  // Serial.print("Gyro range set to: ");
  // switch (sox.getGyroRange()) {
  // case LSM6DS_GYRO_RANGE_125_DPS:
  //   Serial.println("125 degrees/s");
  //   break;
  // case LSM6DS_GYRO_RANGE_250_DPS:
  //   Serial.println("250 degrees/s");
  //   break;
  // case LSM6DS_GYRO_RANGE_500_DPS:
  //   Serial.println("500 degrees/s");
  //   break;
  // case LSM6DS_GYRO_RANGE_1000_DPS:
  //   Serial.println("1000 degrees/s");
  //   break;
  // case LSM6DS_GYRO_RANGE_2000_DPS:
  //   Serial.println("2000 degrees/s");
  //   break;
  // case ISM330DHCX_GYRO_RANGE_4000_DPS:
  //   break; // unsupported range for the DSOX
  // }

  // // sox.setAccelDataRate(LSM6DS_RATE_12_5_HZ);
  // Serial.print("Accelerometer data rate set to: ");
  // switch (sox.getAccelDataRate()) {
  // case LSM6DS_RATE_SHUTDOWN:
  //   Serial.println("0 Hz");
  //   break;
  // case LSM6DS_RATE_12_5_HZ:
  //   Serial.println("12.5 Hz");
  //   break;
  // case LSM6DS_RATE_26_HZ:
  //   Serial.println("26 Hz");
  //   break;
  // case LSM6DS_RATE_52_HZ:
  //   Serial.println("52 Hz");
  //   break;
  // case LSM6DS_RATE_104_HZ:
  //   Serial.println("104 Hz");
  //   break;
  // case LSM6DS_RATE_208_HZ:
  //   Serial.println("208 Hz");
  //   break;
  // case LSM6DS_RATE_416_HZ:
  //   Serial.println("416 Hz");
  //   break;
  // case LSM6DS_RATE_833_HZ:
  //   Serial.println("833 Hz");
  //   break;
  // case LSM6DS_RATE_1_66K_HZ:
  //   Serial.println("1.66 KHz");
  //   break;
  // case LSM6DS_RATE_3_33K_HZ:
  //   Serial.println("3.33 KHz");
  //   break;
  // case LSM6DS_RATE_6_66K_HZ:
  //   Serial.println("6.66 KHz");
  //   break;
  // }

  // // sox.setGyroDataRate(LSM6DS_RATE_12_5_HZ);
  // Serial.print("Gyro data rate set to: ");
  // switch (sox.getGyroDataRate()) {
  // case LSM6DS_RATE_SHUTDOWN:
  //   Serial.println("0 Hz");
  //   break;
  // case LSM6DS_RATE_12_5_HZ:
  //   Serial.println("12.5 Hz");
  //   break;
  // case LSM6DS_RATE_26_HZ:
  //   Serial.println("26 Hz");
  //   break;
  // case LSM6DS_RATE_52_HZ:
  //   Serial.println("52 Hz");
  //   break;
  // case LSM6DS_RATE_104_HZ:
  //   Serial.println("104 Hz");
  //   break;
  // case LSM6DS_RATE_208_HZ:
  //   Serial.println("208 Hz");
  //   break;
  // case LSM6DS_RATE_416_HZ:
  //   Serial.println("416 Hz");
  //   break;
  // case LSM6DS_RATE_833_HZ:
  //   Serial.println("833 Hz");
  //   break;
  // case LSM6DS_RATE_1_66K_HZ:
  //   Serial.println("1.66 KHz");
  //   break;
  // case LSM6DS_RATE_3_33K_HZ:
  //   Serial.println("3.33 KHz");
  //   break;
  // case LSM6DS_RATE_6_66K_HZ:
  //   Serial.println("6.66 KHz");
  //   break;
  // }
}


// Following lines of code checks and returns information about files on your SD Card by utilizing the SDcardprintDirectory ( ) function 
  void SDcardfilescompleteinfo ( ) {
    
    File rootdirectory;
  Serial.print("Initializing SD card... ");

  if (!SD.begin(chipSelectpin)) {
    Serial.println("Card initialization failed. Program will not proceed!");
    while (true);
  }

  Serial.println("initialization done.");


Serial.println( "-----------------Info about Files on your SD Card-----------------------------"  );

Serial.println("Files in the card:");
  rootdirectory = SD.open("/");
  SDcardprintDirectory(rootdirectory, 0);
  Serial.println("");

Serial.println( "------------------------------------"  );
  }

  // the following function is used to search every folder in your SD card and return info on all files
void SDcardprintDirectory(File dir, int numTabs) {
  while (true) {

    File entry =  dir.openNextFile();
    if (! entry) {
      // no more files
      break;
    }
    for (uint8_t i = 0; i < numTabs; i++) {
      Serial.print('\t');
    }
    Serial.print(entry.name());
    if (entry.isDirectory()) {
      Serial.println("/");
      SDcardprintDirectory(entry, numTabs + 1);
    } else {
      // files have sizes, directories do not
      Serial.print("\t\t");
      Serial.println(entry.size(), DEC);
    }
    entry.close();
  }
}


// The functions is used to check the specs of your SD card.
void SDcardspecscompleteinfo ( ) { 

Serial.println( "-----------------Information about your SD Card-----------------------------"  );
// Declare object of utility claasses from the SD card library
Sd2Card card;
SdVolume volume;
SdFile root;


 Serial.print("\nInitializing SD card...");

  // we'll use the initialization code from the utility libraries
  // since we're just testing if the card is working!
  if (!card.init(SPI_HALF_SPEED, chipSelectpin)) {
    Serial.println("initialization failed. Things to check:");
    Serial.println("* is a card inserted?");
    Serial.println("* is your wiring correct?");
    Serial.println("* did you change the chipSelect pin to match your shield or module?");
    Serial.println("Note: press reset button on the board and reopen this Serial Monitor after fixing your issue!");
    while (1);
  } else {
    Serial.println("Wiring is correct and a card is present.");
  }

  // print the type of card
  Serial.println();
  Serial.print("Card type:         ");
  switch (card.type()) {
    case SD_CARD_TYPE_SD1:
      Serial.println("SD1");
      break;
    case SD_CARD_TYPE_SD2:
      Serial.println("SD2");
      break;
    case SD_CARD_TYPE_SDHC:
      Serial.println("SDHC");
      break;
    default:
      Serial.println("Unknown");
  }

  // Now we will try to open the 'volume'/'partition' - it should be FAT16 or FAT32
  if (!volume.init(card)) {
    Serial.println("Could not find FAT16/FAT32 partition.\nMake sure you've formatted the card");
    while (1);
  }

  Serial.print("Clusters:          ");
  Serial.println(volume.clusterCount());
  Serial.print("Blocks x Cluster:  ");
  Serial.println(volume.blocksPerCluster());

  Serial.print("Total Blocks:      ");
  Serial.println(volume.blocksPerCluster() * volume.clusterCount());
  Serial.println();

  // print the type and size of the first FAT-type volume
  uint32_t volumesize;
  Serial.print("Volume type is:    FAT") ;
  Serial.println(volume.fatType(), DEC) ;

  volumesize = volume.blocksPerCluster();    // clusters are collections of blocks
  volumesize *= volume.clusterCount();       // we'll have a lot of clusters
  volumesize /= 2;                           // SD card blocks are always 512 bytes (2 blocks are 1 KB)
  Serial.print("Volume size (KB):  ");
  Serial.println(volumesize);
  Serial.print("Volume size (MB):  ");
  volumesize /= 1024;
  Serial.println(volumesize);
  Serial.print("Volume size (GB):  ");
  Serial.println((float)volumesize / 1024.0);

  Serial.println("\nFiles found on the card (name, date and size in bytes): ");
  root.openRoot(volume);

  // list all files in the card with date and size
  root.ls(LS_R | LS_DATE | LS_SIZE);
  root.close();

Serial.println( "------------------------------------"  );

} 